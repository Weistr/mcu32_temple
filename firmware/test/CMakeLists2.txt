#该路径下所有.c 文件定义为 SRC_LIST
aux_source_directory(. SRC_LIST)
#添加头文件搜索路径
include_directories(
    ${CORE_SUPPORT_DIR}
    ${CORE_SUPPORT_DIR}/GD/GD32F3x0/Include
    ${PERIPHERALS_DIR}/Include
    ${PROJECT_SOURCE_DIR}/App/Inc
    ${PROJECT_SOURCE_DIR}/drivers/Inc
)
#添加非标准的共享库搜索路径
link_directories(${PROJECT_SOURCE_DIR}/build/lib)
#设置链接文件相关路径和变量
SET(FLASH_LD_FILE ${PROJECT_SOURCE_DIR}/gd32f3x0_flash.ld)
SET(LINKER_SCRIPT ${FLASH_LD_FILE})
#设置链接选项
SET(CMAKE_EXE_LINKER_FLAGS
"--specs=nano.specs -specs=nosys.specs -T${LINKER_SCRIPT} -Wl,-
Map=${PROJECT_BINARY_DIR}/${PRJ_NAME}.map,--cref -Wl,--gc-sections")
#生成目标文件
add_executable(${PRJ_NAME}.elf ${SRC_LIST})
#把目标文件与库文件进行链接
target_link_libraries(${PRJ_NAME}.elf gd32_lib)
#设置可执行文件输出路径
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build/bin)
#设置 ELF 转换路径
SET(ELF_FILE ${PROJECT_SOURCE_DIR}/build/bin/${PRJ_NAME}.elf)
SET(HEX_FILE ${PROJECT_SOURCE_DIR}/build/bin/${PRJ_NAME}.hex)
SET(BIN_FILE ${PROJECT_SOURCE_DIR}/build/bin/${PRJ_NAME}.bin)
#添加自定义命令实现 ELF 转换 hex 和 bin 文件
add_custom_command(TARGET "${PRJ_NAME}.elf" POST_BUILD
 COMMAND ${CMAKE_OBJCOPY} -Obinary ${ELF_FILE} ${BIN_FILE}
 COMMAND ${CMAKE_OBJCOPY} -Oihex ${ELF_FILE} ${HEX_FILE}
 COMMENT "Building ${PRJ_NAME}.bin and ${PRJ_NAME}.hex"
 COMMAND ${CMAKE_COMMAND} -E copy ${HEX_FILE} 
"${CMAKE_CURRENT_BINARY_DIR}/${PRJ_NAME}.hex"
 COMMAND ${CMAKE_COMMAND} -E copy ${BIN_FILE} 
"${CMAKE_CURRENT_BINARY_DIR}/${PRJ_NAME}.bin"
 COMMAND ${CMAKE_SIZE} --format=berkeley ${ELF_FILE} ${HEX_FILE}
 COMMENT "Invoking: Cross ARM GNU Print Size"
)